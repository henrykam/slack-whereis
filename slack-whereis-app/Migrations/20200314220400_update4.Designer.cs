// <auto-generated />
using HenryKam.SlackWhereIs.Infrastructure.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HenryKam.SlackWhereIs.Migrations
{
    [DbContext(typeof(SlackWhereIsDbContext))]
    [Migration("20200314220400_update4")]
    partial class update4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .HasColumnName("floor")
                        .HasColumnType("text");

                    b.Property<string>("LocationImageUrl")
                        .HasColumnName("location_image_url")
                        .HasColumnType("text");

                    b.Property<string>("MapImageUrl")
                        .IsRequired()
                        .HasColumnName("map_image_url")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasColumnName("office")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_location_name");

                    b.ToTable("location");

                    b.HasDiscriminator<string>("type").HasValue("Location");
                });

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.LocationTag", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("bigint");

                    b.HasKey("LocationId", "TagId")
                        .HasName("pk_locationtag");

                    b.HasIndex("TagId")
                        .HasName("ix_location_tag_tag_id");

                    b.ToTable("locationtag");
                });

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_tag");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasName("ix_tag_value");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Department", b =>
                {
                    b.HasBaseType("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Location");

                    b.HasDiscriminator().HasValue("Department");
                });

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Employee", b =>
                {
                    b.HasBaseType("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Location");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.MeetingRoom", b =>
                {
                    b.HasBaseType("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Location");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("MeetingRoom");
                });

            modelBuilder.Entity("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.LocationTag", b =>
                {
                    b.HasOne("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Location", "Location")
                        .WithMany("LocationTags")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_tag_location_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HenryKam.SlackWhereIs.Infrastructure.EFCore.Model.Tag", "Tag")
                        .WithMany("LocationTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_location_tag_tag_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
